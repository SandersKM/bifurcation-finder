{"version":3,"sources":["EquationInput.js","Equation.js","App.js","serviceWorker.js","index.js"],"names":["EquationInput","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","alert","calcG","preventDefault","M","i","Math","sqrt","pow","carpoolCost","sourceNumber","calculateG","onSubmit","type","onChange","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kUA2CiBA,G,mBAvCf,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,MAAO,IAErB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,0EAQNE,GACXC,KAAKC,SAAS,CAACN,MAAOI,EAAMG,OAAOP,U,mCAGxBI,GACXI,MAAM,yBAA2BH,KAAKN,MAAMC,MAAQ,IAAMK,KAAKI,SAC/DL,EAAMM,mB,8BAIN,OCnBsB,WAUxB,IATA,IAQIC,EAAI,EACCC,EAAI,EAAGA,EAJG,EAIeA,IAChCD,GAAQE,KAAKC,KAAKD,KAAKE,IATjB,EASwB,GAJlB,GAMd,IAAIC,EAAc,EAAAH,KAAKE,IAAKE,EAThB,IAYZ,OAFAN,EAAIE,KAAKE,IAAIJ,EAAIK,EAAa,IACnBH,KAAKE,KAZP,IADD,GAasCF,KAAKE,IAVhC,EADP,IAGE,EADK,EASqE,EAAE,GAdlF,GDkBCG,K,+BAIP,OACE,0BAAMC,SAAUd,KAAKF,cACnB,oCAEE,2BAAOiB,KAAK,OAAOpB,MAAOK,KAAKN,MAAMC,MAAOqB,SAAUhB,KAAKJ,gBAE7D,6BACA,oCAEE,2BAAOmB,KAAK,OAAOpB,MAAOK,KAAKN,MAAMC,MAAOqB,SAAUhB,KAAKJ,gBAE7D,2BAAOmB,KAAK,SAASpB,MAAM,gB,GAlCPsB,IAAMC,Y,OESnBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2fb4f795.chunk.js","sourcesContent":["import React from 'react';\r\nimport { calculateG } from \"./Equation\";\r\n\r\nclass EquationInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert('A name was submitted: ' + this.state.value + \" \" + this.calcG());\r\n    event.preventDefault();\r\n  }\r\n\r\n  calcG(){\r\n    return calculateG();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          h:\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n        </label>\r\n        <br/>\r\n        <label>\r\n          x:\r\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n        </label>\r\n        <input type=\"submit\" value=\"Submit\" />\r\n      </form>\r\n    );\r\n  }\r\n  }\r\n\r\n  export default EquationInput;","import { derivative } from 'mathjs'\r\nimport { newtonRaphson } from 'root-finding'\r\n\r\nexport const calculateG = () =>{\r\n  let h = 0.1\r\n  let x = 1.0\r\n  let x0 = 1.1\r\n  let alpha = 0.5\r\n  let sourceWeight = 1\r\n  let sourceNumber = 2\r\n  let sourceY = 1\r\n  let sinkX = 2\r\n  let M = 0\r\n  for (let i = 0; i < sourceNumber; i++ ) {\r\n    M = M + Math.sqrt(Math.pow(x, 2) + sourceY)\r\n  }\r\n  let carpoolCost = Math.pow((sourceNumber * sourceWeight), alpha)*( sinkX - x )\r\n  M = Math.pow(M + carpoolCost, 2)\r\n  let fill = Math.pow((sourceNumber*((x0 - x) * Math.pow(sourceWeight, alpha) * sourceY))/2,2) / h ;\r\n  return M + fill;\r\n}\r\n","import React from 'react';\nimport EquationInput from './EquationInput';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EquationInput />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}