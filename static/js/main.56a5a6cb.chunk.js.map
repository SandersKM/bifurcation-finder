{"version":3,"sources":["Equation.js","EquationInput.js","App.js","serviceWorker.js","index.js"],"names":["calculateG","sourceWeight","sourceY","M","x","total","i","length","Math","sqrt","pow","calculateTotalCosts","carpoolCost","alpha","sinkX","edgeLength","combinedWeight","reduce","add","calculateCarpoolCost","fill","x0","h","totalArea","triangle","calculateFill","rootG","math","create","all","scope","toString","forEach","weight","totalIndCost","value","range","G","console","log","derivative","evaluate","a","b","EquationInput","props","state","handleChange","bind","handleSubmit","event","this","setState","target","alert","calcG","preventDefault","onSubmit","type","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56a5a6cb.chunk.js","sourcesContent":["import { create, all } from 'mathjs'\r\nimport { parseExpression } from '@babel/parser'\r\n//import { newtonRaphson } from 'root-finding'\r\n\r\n\r\n\r\nexport const calculateG = () => {\r\n  let h = 0.1\r\n  let x = 1.0\r\n  let x0 = 1.1\r\n  let alpha = 0.5\r\n  let sourceWeight = [1, 1]\r\n  let sourceY = [1, 1]\r\n  let sinkX = 2\r\n  let M = calculateTotalCosts(sourceY, x)\r\n  let carpoolCost = calculateCarpoolCost(sourceWeight, alpha, sinkX, x);\r\n  M = Math.pow(M + carpoolCost, 2)\r\n  let fill = calculateFill(sourceWeight, alpha, sourceY, x0, x, h);\r\n  //console.log(math.chain().derivative('x^2 + x', 'x'))\r\n  rootG()\r\n  return fill + M;\r\n}\r\n\r\nexport const rootG = () => {\r\n  const config = { }\r\n  const math = create(all, config)\r\n  let scope = {\r\n    h: 0.1,\r\n    alpha: 0.5,\r\n    x0: 1.1,\r\n    sourceWeight: [1, 1],\r\n    sourceY: [1, 1],\r\n    sinkX: 2\r\n  }\r\n  // calculate carpool cost\r\n  let edgeLength = '(' + scope.sinkX.toString() + ' - x)'\r\n  let combinedWeight = 0\r\n  math.forEach(scope.sourceWeight, function(weight) {\r\n    combinedWeight = combinedWeight + weight\r\n  })\r\n  let carpoolCost = (combinedWeight ** scope.alpha).toString() + \"*\" + edgeLength\r\n  // calculate individual cost\r\n  let totalIndCost = \"\"\r\n  math.forEach(scope.sourceY, function(value) {\r\n    totalIndCost = totalIndCost + \"sqrt(\" + value + \" + x^2) + \"\r\n  })\r\n  let M = '(' + totalIndCost + carpoolCost +')^2'\r\n\r\n\r\n  // calculate fill\r\n  let totalArea = \"\"\r\n  math.forEach(math.range(0, scope.sourceWeight.length), function(i) {\r\n    let triangle = \"(((\" + scope.x0 + \" - x) *  \" + ( ( ( scope.sourceWeight[i] ) ** scope.alpha ) * scope.sourceY[i]).toString() + \") / 2) \"\r\n    if (i !== 0) {\r\n      triangle = \" + \" + triangle\r\n    }\r\n    totalArea = totalArea + triangle\r\n  })\r\n  let fill = \"((( \" + totalArea + \")^2) / \" + scope.h.toString() + \")\"\r\n  let G = fill + \" + \" + M\r\n  console.log(G) \r\n  console.log(math.derivative(G, \"x\").toString()) \r\n  \r\n  scope.x = 1.0\r\n  console.log(math.evaluate(G, scope))\r\n\r\n}\r\n\r\nfunction calculateFill(sourceWeight, alpha, sourceY, x0, x, h) {\r\n  let totalArea = 0;\r\n  for (let i = 0; i < sourceWeight.length; i++ ) {\r\n    let triangle = ((x0 - x) * Math.pow(sourceWeight[i], alpha) * sourceY[i]) / 2;\r\n    totalArea = totalArea + triangle;\r\n  }\r\n  return Math.pow(totalArea, 2) / h ;\r\n}\r\n\r\nfunction calculateTotalCosts(sourceY, x) {\r\n  let total = 0\r\n  for (let i = 0; i < sourceY.length; i++ ) {\r\n    total = total + Math.sqrt(Math.pow(x, 2) + sourceY[i])\r\n  }\r\n  return total \r\n}\r\n\r\nfunction calculateCarpoolCost(sourceWeight, alpha, sinkX, x) {\r\n  let edgeLength = ( sinkX - x )\r\n  let combinedWeight = sourceWeight.reduce(add)\r\n  let alphaAdjustedWeight = Math.pow(combinedWeight, alpha)\r\n  return  alphaAdjustedWeight * edgeLength\r\n}\r\n\r\nconst add = (a, b) => a + b;\r\n","import React from 'react';\r\nimport { calculateG } from \"./Equation\";\r\n\r\nclass EquationInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {value: ''};\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    alert('G(1.0) =  ' + this.state.value + \" \" + this.calcG());\r\n    event.preventDefault();\r\n  }\r\n\r\n  calcG(){\r\n    return calculateG();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input type=\"submit\" value=\"Sample Calculation 1\" />\r\n      </form>\r\n    );\r\n  }\r\n  }\r\n\r\n  export default EquationInput;","import React from 'react';\nimport EquationInput from './EquationInput';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EquationInput />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}